# Azure Pipeline.

variables:
- group: devops_agent
- group: devops_kv

name: $(Date:yyyyMMdd).$(Rev:.r)
trigger:
  batch: true
  branches:
    include:
    - master

stages: 
  - stage: dev
    displayName: dev  
    jobs: 
    - job: Setup
      pool:
        vmImage: 'ubuntu-16.04' 
      steps:
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '$(terraform_version)'
      - task: AzureCLI@1
        displayName: Setup
        inputs:
          azureSubscription: $(azure_sub)
          scriptLocation: 'scriptPath'
          scriptPath: ./scripts/setup.sh
          arguments: -n $(name) -e $(env) -l $(location) -c $(client-app-id) -s $(server-app-id) -p $(server-app-secret) -z $(ARM-CLIENT-ID) -y $(ARM-CLIENT-SECRET)
      - task: TerraformCLI@0
        inputs:
          command: 'init'
          backendType: 'azurerm'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          backendServiceArm: '$(azure_sub)'
          backendAzureRmResourceGroupName: '$(name)$(env)'
          backendAzureRmStorageAccountName: '$(name)$(env)'
          backendAzureRmContainerName: '$(env)'
          backendAzureRmKey: '$(env).tfstate'
          commandOptions: '-upgrade'
        displayName: Terraform init
      - task: TerraformCLI@0
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        displayName: Terraform validate
      - task: PublishPipelineArtifact@1
        inputs:
          path: '$(System.DefaultWorkingDirectory)/terraform/terraform.tfvars'
          artifactName: vars
    - job: Plan
      dependsOn: Setup
      pool:
        vmImage: 'ubuntu-16.04'
      steps:
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '$(terraform_version)'
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: vars
          path: '$(System.DefaultWorkingDirectory)/terraform/'
      - task: TerraformCLI@0
        inputs:
          command: 'init'
          backendType: 'azurerm'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          backendServiceArm: '$(azure_sub)'
          backendAzureRmResourceGroupName: '$(name)$(env)'
          backendAzureRmStorageAccountName: '$(name)$(env)'
          backendAzureRmContainerName: '$(env)'
          backendAzureRmKey: '$(env).tfstate'
          commandOptions: '-upgrade'
        displayName: Terraform init
      - task: TerraformCLI@0
        inputs:
          command: 'plan'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceName: '$(azure_sub)'
          commandOptions: '-out=$(env).plan'
        displayName: Terraform plan
      - task: PublishPipelineArtifact@1
        inputs:
          path: '$(System.DefaultWorkingDirectory)/terraform/$(env).plan'
          artifactName: plan
    - job: Deploy
      dependsOn: Plan
      pool:
        vmImage: 'ubuntu-16.04' 
      steps:
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: '$(terraform_version)'
      - task: DownloadSecureFile@1
        inputs:
          secureFile: helm-certs.zip
      - bash: cp $(Agent.TempDirectory)/helm-certs.zip .
        displayName: place helm certs 
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: plan
          path: '$(System.DefaultWorkingDirectory)/terraform/'
      - task: DownloadPipelineArtifact@2
        inputs:
          artifact: vars
          path: '$(System.DefaultWorkingDirectory)/terraform/'
      - task: TerraformCLI@0
        inputs:
          command: 'init'
          backendType: 'azurerm'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          backendServiceArm: '$(azure_sub)'
          backendAzureRmResourceGroupName: '$(name)$(env)'
          backendAzureRmStorageAccountName: '$(name)$(env)'
          backendAzureRmContainerName: '$(env)'
          backendAzureRmKey: '$(env).tfstate'
          commandOptions: '-upgrade'
        displayName: Terraform init
      - task: TerraformCLI@0
        inputs:
          command: 'apply'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
          environmentServiceName: '$(azure_sub)'
          commandOptions: '$(env).plan'
        displayName: Terraform apply
      - task: AzureCLI@1
        displayName: Post-Apply 
        inputs:
          azureSubscription:  $(azure_sub)
          scriptLocation: 'scriptPath' 
          scriptPath: ./scripts/config.sh
          arguments: -e $(env) -n $(name)




