parameters:
  env: ''
  azure_sub: ''
  name: ''
  AADCLIENTID: ''
  AADSERVERID: ''
  AADSERVERSECRET: ''
  ARMCLIENTID: ''
  ARMCLIENTSECRET: ''
  location: ''

steps:
- bash: terraform fmt ./terraform
  displayName: terraform format
- task: AzureCLI@2
  displayName: Setup
  inputs:
    azureSubscription: ${{parameters.azure_sub}} 
    scriptType: bash
    scriptLocation: inlineScript
    inlineScript: |
        RESOURCE_GROUP_NAME=${{parameters.name}}${{parameters.env}}
        ARM_SUBSCRIPTION_ID=$(az account show --query id --out tsv)
        ARM_TENANT_ID=$(az account show --query tenantId --out tsv)
        az account set --subscription $ARM_SUBSCRIPTION_ID
        set +e
        if [ $(az group exists -n $RESOURCE_GROUP_NAME -o tsv) = false ]
        then
            echo "Resource Group $RESOURCE_GROUP_NAME needs to be created"
        else
            echo "Using resource group $RESOURCE_GROUP_NAME"
        fi
        az storage account show -n $RESOURCE_GROUP_NAME -g $RESOURCE_GROUP_NAME > /dev/null
        if [ $? -eq 0 ]
        then
            echo "Using storage account $RESOURCE_GROUP_NAME in resource group $RESOURCE_GROUP_NAME"
        else
            az storage account create --resource-group $RESOURCE_GROUP_NAME --name $RESOURCE_GROUP_NAME --sku Standard_LRS --encryption-services blob
        fi
        az keyvault show --name $RESOURCE_GROUP_NAME > /dev/null
        if [ $? -eq 0 ]
        then
            echo "Using keyvault $RESOURCE_GROUP_NAME"
        else
            echo "KeyVault $RESOURCE_GROUP_NAME needs to be created and populated wth the k8s AAD values"
        fi
        set -e
        az storage container create --name ${{parameters.env}} --account-name $RESOURCE_GROUP_NAME
        pwd
        ls -l
        cd ./aks/terraform
        cat <<EOT >> terraform.tfvars
            tenant_id = "${ARM_TENANT_ID}"
            subscription_id = "${ARM_SUBSCRIPTION_ID}"
            resource_group_name = "${RESOURCE_GROUP_NAME}"
            arm_client_id = "${{parameters.ARMCLIENTID}}"
            arm_client_secret = "${{parameters.ARMCLIENTSECRET}}"
            location = "${{parameters.LOCATION}}"
        EOT
- task: PublishPipelineArtifact@1
  inputs:
    path: '$(System.DefaultWorkingDirectory)/terraform/terraform.tfvars'
    artifactName: vars
